package com.thoughtworks.gauge.lexer;/* The following code was generated by JFlex 1.4.3 on 3/11/15 5:37 PM */

// Copyright 2015 ThoughtWorks, Inc.

// This file is part of getgauge/Intellij-plugin.

// getgauge/Intellij-plugin is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// getgauge/Intellij-plugin is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with getgauge/Intellij-plugin.  If not, see <http://www.gnu.org/licenses/>.

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.thoughtworks.gauge.language.token.SpecTokenTypes.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/11/15 5:37 PM from the specification file
 * <tt>/Users/apoorvam/gauge/Intellij-Plugin/src/com/thoughtworks/gauge/lexer/com.thoughtworks.gauge.lexer._SpecLexer.flex</tt>
 */
public class _SpecLexer implements FlexLexer {
    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int INTABLEBODY = 10;
    public static final int INDYNAMIC = 6;
    public static final int INTABLECELL = 16;
    public static final int INTABLEBODYROW = 12;
    public static final int YYINITIAL = 0;
    public static final int INTABLEHEADER = 8;
    public static final int INARG = 4;
    public static final int INDYNAMICTABLEITEM = 14;
    public static final int INSTEP = 2;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
            8, 8
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\23" +
                    "\1\6\6\0\1\5\2\0\1\11\14\0\1\17\1\0\1\7\1\12" +
                    "\1\10\2\0\1\14\1\20\2\0\1\22\1\0\1\15\4\0\1\21" +
                    "\6\0\1\16\1\13\7\0\1\24\4\0\1\14\1\20\2\0\1\22" +
                    "\1\0\1\15\4\0\1\21\6\0\1\16\1\13\7\0\1\4\uff83\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\1\3\1\4\1\0\1\5\1\0" +
                    "\1\6\4\7\1\10\1\11\1\12\1\7\1\1\2\13" +
                    "\1\14\1\15\1\2\1\16\1\2\1\3\1\17\1\3" +
                    "\1\4\2\20\1\21\1\4\1\22\1\23\1\6\2\24" +
                    "\1\5\1\25\1\23\1\6\3\26\1\27\1\26\2\6" +
                    "\4\0\1\7\3\0\1\30\1\12\3\0\3\12\1\30" +
                    "\1\0\1\30\1\12\2\7\1\0\1\7\2\30\2\12" +
                    "\2\30\2\0\2\7\3\0\1\31\1\0\2\31\1\0" +
                    "\3\32";

    private static int[] zzUnpackAction() {
        int[] result = new int[94];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\25\0\52\0\77\0\124\0\151\0\176\0\223" +
                    "\0\250\0\275\0\322\0\347\0\374\0\u0111\0\u0111\0\u0126" +
                    "\0\u013b\0\u0150\0\u0165\0\u017a\0\u017a\0\u017a\0\u018f\0\u017a" +
                    "\0\u01a4\0\u01b9\0\u017a\0\u01ce\0\u01e3\0\u01f8\0\u020d\0\u017a" +
                    "\0\u0222\0\u017a\0\u017a\0\u017a\0\u0237\0\u024c\0\u0261\0\u017a" +
                    "\0\u0276\0\u028b\0\u017a\0\u01f8\0\u020d\0\u017a\0\u02a0\0\u02b5" +
                    "\0\u02ca\0\275\0\u02df\0\u02f4\0\u0309\0\u031e\0\u0333\0\347" +
                    "\0\u0348\0\u035d\0\u0372\0\374\0\u0111\0\u013b\0\u0387\0\u039c" +
                    "\0\u02f4\0\u03b1\0\u03c6\0\u03db\0\u03f0\0\u0405\0\u02f4\0\u041a" +
                    "\0\u042f\0\u0444\0\u017a\0\u0459\0\u017a\0\u046e\0\u02f4\0\u0483" +
                    "\0\u0498\0\u04ad\0\u017a\0\u04c2\0\u04d7\0\u04ec\0\u0501\0\u0516" +
                    "\0\u052b\0\u02f4\0\u0540\0\u0555\0\u056a\0\u02f4";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[94];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\4\12" +
                    "\1\21\11\12\1\22\1\23\1\24\4\22\1\25\13\22" +
                    "\1\26\1\22\23\27\1\30\1\31\10\32\1\33\13\32" +
                    "\1\34\1\35\1\36\1\37\1\35\1\40\17\35\1\41" +
                    "\4\42\1\43\20\42\1\44\1\45\1\46\1\47\1\43" +
                    "\2\44\1\50\1\44\1\51\12\44\1\52\1\53\1\54" +
                    "\1\55\5\53\1\56\13\53\1\57\1\60\1\45\1\46" +
                    "\1\60\1\43\17\60\1\61\1\62\1\63\1\64\1\65" +
                    "\3\66\16\62\1\67\1\0\1\70\1\71\3\0\2\67" +
                    "\1\72\1\73\13\67\2\0\1\71\3\0\2\67\1\72" +
                    "\1\73\12\67\1\62\1\63\1\64\1\74\2\75\1\20" +
                    "\4\62\1\76\11\62\1\75\1\63\1\64\22\75\1\77" +
                    "\1\100\1\101\3\77\1\102\16\77\1\62\1\63\1\64" +
                    "\1\65\3\66\5\62\1\103\10\62\1\22\2\0\4\22" +
                    "\1\0\13\22\1\0\1\22\2\0\1\24\47\0\23\27" +
                    "\1\0\1\31\24\27\1\31\10\32\1\0\13\32\1\34" +
                    "\24\32\1\34\1\35\2\0\1\35\1\0\17\35\1\41" +
                    "\2\0\2\37\24\0\1\37\21\0\1\35\2\0\21\35" +
                    "\1\41\2\0\2\46\24\0\1\46\24\0\1\47\32\0" +
                    "\1\51\17\0\1\44\27\0\2\53\14\0\1\60\2\0" +
                    "\1\60\1\0\17\60\1\61\1\60\2\0\21\60\1\61" +
                    "\2\0\1\64\6\0\1\104\1\105\23\0\1\104\1\105" +
                    "\12\0\1\75\1\63\1\64\1\65\3\66\16\75\1\66" +
                    "\1\106\1\107\22\66\1\67\2\0\1\110\3\111\17\67" +
                    "\2\0\1\71\3\0\17\67\1\112\1\113\1\110\3\111" +
                    "\2\67\1\72\14\67\1\114\1\115\1\110\3\111\3\67" +
                    "\1\73\12\67\1\77\1\100\1\101\22\77\2\0\1\101" +
                    "\6\0\1\104\1\105\12\0\1\102\1\116\1\117\22\102" +
                    "\1\62\1\63\1\64\1\65\3\66\6\62\1\120\2\62" +
                    "\1\121\4\62\1\0\1\112\1\113\6\0\1\104\14\0" +
                    "\1\114\1\115\7\0\1\105\14\0\1\107\6\0\1\104" +
                    "\1\105\15\0\1\110\3\111\16\0\1\111\1\122\1\123" +
                    "\22\111\2\0\1\113\24\0\1\115\24\0\1\117\6\0" +
                    "\1\104\1\105\12\0\1\62\1\63\1\64\1\65\3\66" +
                    "\7\62\1\124\7\62\1\63\1\64\1\65\3\66\12\62" +
                    "\1\125\3\62\2\0\1\123\22\0\1\62\1\63\1\64" +
                    "\1\126\3\66\10\62\1\127\6\62\1\63\1\64\1\65" +
                    "\3\66\13\62\1\130\2\62\1\75\1\63\1\64\1\65" +
                    "\3\66\10\75\1\127\5\75\1\127\1\131\1\132\22\127" +
                    "\1\62\1\63\1\64\1\133\3\66\10\62\1\134\5\62" +
                    "\2\0\1\132\6\0\1\104\1\105\12\0\1\75\1\63" +
                    "\1\64\1\65\3\66\10\75\1\134\5\75\1\134\1\135" +
                    "\1\136\22\134\2\0\1\136\6\0\1\104\1\105\12\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[1407];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    private static final char[] EMPTY_BUFFER = new char[0];
    private static final int YYEOF = -1;
    private static java.io.Reader zzReader = null; // Fake

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\4\1\1\0\1\1\1\0\13\1\3\11\1\1" +
                    "\1\11\2\1\1\11\4\1\1\11\1\1\3\11\3\1" +
                    "\1\11\2\1\1\11\2\1\1\11\3\1\4\0\1\1" +
                    "\3\0\2\1\3\0\4\1\1\0\4\1\1\0\2\1" +
                    "\1\11\1\1\1\11\2\1\2\0\1\1\1\11\3\0" +
                    "\1\1\1\0\2\1\1\0\3\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[94];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * this buffer may contains the current text array to be matched when it is cheap to acquire it
     */
    private char[] zzBufferArray;

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the textposition at the last state to be included in yytext
     */
    private int zzPushbackPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /* user code: */
    public _SpecLexer() {
        this((java.io.Reader) null);
    }


    public _SpecLexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    public _SpecLexer(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 100) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzPushbackPos = 0;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p/>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p/>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p/>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p/>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;
        char[] zzBufferArrayL = zzBufferArray;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL)
                        zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 22: {
                    yybegin(INDYNAMICTABLEITEM);
                    return DYNAMIC_ARG;
                }
                case 27:
                    break;
                case 4: {
                    yybegin(INTABLEHEADER);
                    return TABLE_HEADER;
                }
                case 28:
                    break;
                case 7: {
                    return COMMENT;
                }
                case 29:
                    break;
                case 6: {
                    yybegin(INTABLECELL);
                    return TABLE_ROW_VALUE;
                }
                case 30:
                    break;
                case 11: {
                    yybegin(YYINITIAL);
                    return STEP;
                }
                case 31:
                    break;
                case 15: {
                    yybegin(INSTEP);
                    return DYNAMIC_ARG_END;
                }
                case 32:
                    break;
                case 24: {
                    return SCENARIO_HEADING;
                }
                case 33:
                    break;
                case 21: {
                    yybegin(INDYNAMICTABLEITEM);
                    return DYNAMIC_ARG_START;
                }
                case 34:
                    break;
                case 25: {
                    return TAGS;
                }
                case 35:
                    break;
                case 5: {
                    yybegin(INTABLEBODYROW);
                    return WHITESPACE;
                }
                case 36:
                    break;
                case 18: {
                    yypushback(1);
                    yybegin(YYINITIAL);
                }
                case 37:
                    break;
                case 3: {
                    return DYNAMIC_ARG;
                }
                case 38:
                    break;
                case 20: {
                    yybegin(INTABLEBODY);
                    return NEW_LINE;
                }
                case 39:
                    break;
                case 8: {
                    yybegin(INTABLEHEADER);
                    return TABLE_BORDER;
                }
                case 40:
                    break;
                case 13: {
                    yybegin(INARG);
                    return ARG_START;
                }
                case 41:
                    break;
                case 2: {
                    return ARG;
                }
                case 42:
                    break;
                case 26: {
                    return KEYWORD;
                }
                case 43:
                    break;
                case 14: {
                    yybegin(INSTEP);
                    return ARG_END;
                }
                case 44:
                    break;
                case 17: {
                    yybegin(INTABLEHEADER);
                    return TABLE_BORDER;
                }
                case 45:
                    break;
                case 16: {
                    yybegin(INTABLEBODY);
                    return NEW_LINE;
                }
                case 46:
                    break;
                case 10: {
                    return SPEC_HEADING;
                }
                case 47:
                    break;
                case 19: {
                    yybegin(INTABLEBODYROW);
                    return TABLE_BORDER;
                }
                case 48:
                    break;
                case 9: {
                    yybegin(INSTEP);
                    return STEP_IDENTIFIER;
                }
                case 49:
                    break;
                case 1: {
                    yybegin(INSTEP);
                    return STEP;
                }
                case 50:
                    break;
                case 12: {
                    yybegin(INDYNAMIC);
                    return DYNAMIC_ARG_START;
                }
                case 51:
                    break;
                case 23: {
                    yybegin(INTABLEBODYROW);
                    return DYNAMIC_ARG_END;
                }
                case 52:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        return null;
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
